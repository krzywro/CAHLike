@*implements IDisposable*@
@inject AppState state

<div class="card" style="width: 100%; margin: 0.5rem 0;">
    <div class="card-header">Mój wybór</div>
    <div class="card-body">
        <div class="row justify-content-center">
            @foreach (var card in state.SelectedAnswers)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                    <AnswerCard @key="@card.Id" Answer="@card" ShowAnswerNumber="false"></AnswerCard>
                </div>
            }
        </div>
        @if (state.CurrentState == Flow.State.PickingAnswer)
        {
            <div class="row justify-content-center">
                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 text-center">
                    <button type="button" class="btn @buttonColor btn-lg" style="margin: 0.5rem;" @onclick="SendAnswer">Wyślij odpowiedź</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string buttonColor => state.SelectedAnswers.Count == state.CurrentQuestion.AnswerCards
        ? "btn-primary"
        : "btn-secondary";

    private async Task SendAnswer()
    {
        await state.SendAnswers();
        StateHasChanged();
    }

    protected override void OnInitialized() => state.Events.OnAnswerSelectionChange += StateHasChanged;
    public void Dispose() => state.Events.OnAnswerSelectionChange -= StateHasChanged;
}
