@page "/"
@using KrzyWro.CAH.Shared.Cards
@using KrzyWro.CAH.Client.Shared.Components
@implements IDisposable
@inject AppState state
<div class="row justify-content-center sticky-top">
    <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
        @if (state.CurrentQuestion != null)
        {
            <QuestionCard Question="state.CurrentQuestion"></QuestionCard>
        }
    </div>
</div>
<div class="row">
    <div class="col-12">
        @if (state.Hand.Any())
        {
            <div class="card" style="width: 100%; margin: 0.5rem 0;">
                <div class="card-header">Moje karty</div>
                <div class="card-body">
                    <div class="row justify-content-center">
                        @foreach (var card in state.Hand)
                        {
                            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12" @onclick="@(e => OnAnswerClick(card))">
                                <AnswerCard @key="@card.Id" Answer="@card"></AnswerCard>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        @if (state.SelectedAnswers.Any())
        {
            <div class="card" style="width: 100%; margin: 0.5rem 0;">
                <div class="card-header">Mój wybór</div>
                <div class="card-body">
                    <div class="row justify-content-center">
                        @foreach (var card in state.SelectedAnswers)
                        {
                            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                                <AnswerCard @key="@card.Id" Answer="@card" ShowAnswerNumber="false"></AnswerCard>
                            </div>
                        }
                    </div>
                    @if (state.Hand.Any())
                    {
                        <div class="row justify-content-center">
                            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 text-center">
                                <button type="button" class="btn btn-primary btn-lg" style="margin: 0.5rem;" @onclick="SendAnswer">Wyślij odpowiedź</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @if (!state.Hand.Any() && !(state.BestAnswer.Any() && !iAmSelectingBestAnswer))
        {
            <div class="card" style="width: 100%; margin: 0.5rem 0;">
                <div class="card-header">@(iAmSelectingBestAnswer ? "Wybierz najlepszą odpowiedź" : "Odpowiedzi graczy")</div>
                <div class="card-body">
                    @if (state.PlayerAnswers.Any())
                    {
                        <div class="row justify-content-center">
                            @foreach (var list in state.PlayerAnswers)
                            {
                                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12" @onclick="@(e => ToggleBestAnswer(list))">

                                    <div class="card @(state.BestAnswer == list ? "bg-primary" : "bg-secondary")" style="width: 100%; margin: 0.5rem;">
                                        <div class="card-body">
                                            <div class="row justify-content-center">
                                                @foreach (var card in list)
                                                {
                                                    <div class="col-12">
                                                        <AnswerCard @key="@card.Id" Answer="@card" ShowAnswerNumber="false"></AnswerCard>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (iAmSelectingBestAnswer)
                        {
                            <div class="row justify-content-center">
                                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 text-center">
                                    <button type="button" class="btn btn-primary btn-lg" style="margin: 0.5rem;" @onclick="SelectAnswer">Wybierz odpowiedź</button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @if (state.BestAnswer.Any() && !iAmSelectingBestAnswer)
        {
            <div class="card bg-success text-white" style="width: 100%">
                <div class="card-header">Najlepsza odpowiedź: @state.BestAnswerPlayerName</div>
                <div class="card-body">
                    <div class="row justify-content-center">
                        @foreach (var card in state.BestAnswer)
                        {
                            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                                <AnswerCard @key="@card.Id" Answer="@card"></AnswerCard>
                            </div>
                        }
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 text-center">
                            <button type="button" class="btn btn-primary btn-lg" style="margin: 1rem auto" @onclick="NextQuestion">Następne pytanie</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@code {
    private bool iAmSelectingBestAnswer = false;

    private async Task OnAnswerClick(AnswerModel answer)
    {
        await state.ToggleAnswer(answer);
        StateHasChanged();
    }

    private async Task SendAnswer()
    {
        await state.SendAnswers();
        StateHasChanged();
    }

    private async Task SelectAnswer()
    {
        if (state.BestAnswer.Any())
        {
            iAmSelectingBestAnswer = false;
            StateHasChanged();
            await state.PickAnswer();
        }
    }

    private async Task NextQuestion()
    {
        StateHasChanged();
        await state.RequestQuestion();
        await state.RequestHand();
    }

    private void ToggleBestAnswer(List<AnswerModel> answers)
    {
        if (iAmSelectingBestAnswer)
        {
            state.BestAnswer = answers;
            StateHasChanged();
        }
    }

    private void OnSelectBestAnswer()
    {
        iAmSelectingBestAnswer = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        state.Events.OnQuestionRetrival += StateHasChanged;
        state.Events.OnHandRetrival += StateHasChanged;
        state.Events.OnWaitForOtherPlayers += StateHasChanged;
        state.Events.OnWaitForBestPick += StateHasChanged;
        state.Events.OnBestPick += StateHasChanged;
        state.Events.OnSelectBestAnswer += OnSelectBestAnswer;

        await state.EnsurePlayerHubConnection();
        await state.RegisterPlayer();
        await state.RequestQuestion();
        await state.RequestHand();
    }

    public void Dispose()
    {
        state.Events.OnQuestionRetrival -= StateHasChanged;
        state.Events.OnHandRetrival -= StateHasChanged;
        state.Events.OnWaitForOtherPlayers -= StateHasChanged;
        state.Events.OnWaitForBestPick -= StateHasChanged;
        state.Events.OnBestPick -= StateHasChanged;
        state.Events.OnSelectBestAnswer -= OnSelectBestAnswer;
    }
}
